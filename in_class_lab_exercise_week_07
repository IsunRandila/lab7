#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
};

// Inorder traversal
void traverseInOrder(struct node *root) {
    //traverse left tree , root then right tree
if (root != NULL) {
      traverseInOrder(root->left);
      cout<<root->key<<" ";
      traverseInOrder(root->right);
}}

void traversePreOrder(struct node *root) {
    //traverse root, left tree then right tree
   if (root != NULL) {
      cout<<root->key<<" ";
      traversePreOrder(root->left);
      traversePreOrder(root->right);
   }
}

void traversePostOrder(struct node *root) {
    //traverse left tree, right tree then root
   if (root != NULL) {
      traversePostOrder(root->left);
      traversePostOrder(root->right);
      cout<<root->key<<" ";
   }
}

// creating a new node
struct node *newNode(int data){
    node* newNode = new node();
    newNode->key = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


// Insert a node
struct node *insertNode(struct node *node, int key) {
  if (node == NULL) {
        return newNode(key);
    }
    if (key < node->key) {
        node->left = insertNode(node->left, key);
    } else if (key > node->key) {
        node->right = insertNode(node->right, key);
    }
    return node;
}


// Deleting a node
struct node *deleteNode(struct node *root, int key) {
if (root == NULL) {
    return root;
  }
  if (key < root->key) {
    root->left = deleteNode(root->left, key);
  } else if (key > root->key) {
    root->right = deleteNode(root->right, key);
  } else {
      //case 1: leaf node
    if ((root->left == NULL) && (root->right == NULL)){
        delete root;
        root = NULL;
    }
    // case 2: one child
    if (root->left == NULL) {
      struct node *temp = root->right;
      delete root;
      return temp;
    } else if (root->right == NULL) {
      struct node *temp = root->left;
      delete root;
      return temp;
    }
    //case 3: 2 children
    struct node *temp = root->right;
    //finding the smallest node in the right sub tree
    while (temp->left != NULL) {
      temp = temp->left;
    }
    root->key = temp->key;
    root->right = deleteNode(root->right, temp->key);
  }
  return root;

}
// Driver c ode
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseInOrder(root);
}
